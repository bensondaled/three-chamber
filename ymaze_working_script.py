### INSTRUCTIONS
"""
This file is a general script which is capable of analyzing the Y-maze movies.

To use the script:
    1. Edit the parameters at the start of this file (do not edit anything past the warning "DON'T EDIT FROM HERE").
    2. Open iPython. Ensure you are located in the folder where this script exists. (If you are not, running the script will fail immediately.) 

Options available to you:
    -mode: 
    (1) group mode allows you to process many mice one after another. 
    (2) single mode allows you to process a single movie.
    (3) collect runs through all the mice and puts the marking data into a spreadsheet.
    -actions:
    (1) "track" tracks the mouse's location and saves this data. (you only need to repeat this for a mouse if you change parameters).
    (2) "mark" uses the tracking data to determine the mouse's performance. (tracking must have been run for this to work.)
    (3) "both" runs both tracking and marking sequentially.

Points to avoid errors:
    -in the parameters section, specify parameters using *exactly* the options given at the end of the line 
    -data folders must be located in Y:\\abadura\\Y-Maze, in either "Black6" or "DREADDs", and not subnested in any folders within that folder.
    -do not leave any files or folders inside any of the data storage areas, if they were not generated by these programs.
    -do not ever rename files whatsoever.
    -on lines where multiple options are available, remember to comment out the irrelevant lines by putting a "#" as the first character of the line.
"""

### GENERAL PARAMETERS
drive = 'Y:' #the drive on which wang lab bucket is mounted, ex 'Y:'
mode = 'collect' #OPTIONS: group / single / collect
actions = 'track' #OPTIONS:  track / mark / both
condition = 'Black6' #OPTIONS: Black6 / DREADDs

### FOR GROUP
mice = ['DREADD_GR3_M1_acq1', 'DREADD_GR3_M2_acq1'] #OPTIONS: ['m1,'m2'] / 'all' / 'ask'

### FOR SINGLE
mouse = 'DREADD_GR3_M2_acq3' #name of the folder containing the mouse's 5 trials
n = 4

### TRACKING PARAMETERS
diff_thresh = 95
show = True #OPTIONS: True / False
save_video = False #OPTIONS: True / False
ms_bt_frames = 1 #milliseconds between frames when showing

### MARKING PARAMETERS
resample = 3 #1 means no resampling



### DON'T EDIT FROM HERE ###
#################################################################
### DON'T EDIT FROM HERE ###
from ymaze_track import MouseTracker
from ymaze_mark import Marker
from ymaze_track import FileHandler
import os
import csv
import numpy as np
from tkFileDialog import askopenfilenames
import sys
import Tkinter as tk
data_dir = os.path.join(drive, 'abadura', 'Y-Maze', condition)

if 'all' in mice or mice == 'all':
    mice = sorted([m for m in os.listdir(data_dir) if 'hab' not in m.lower() and m[0]!='.' and 'summary' not in m]) # this will run all mice of the selected condition

elif 'ask' in mice or mice == 'ask':
    root1 = tk.Tk()
    tempdir = os.path.join('.','temp')
    def clean():
        for f in os.listdir(tempdir):
            os.remove(os.path.join(tempdir,f))
        os.rmdir(tempdir)
    mice_names = sorted([m for m in os.listdir(data_dir) if 'hab' not in m.lower() and m[0]!='.' and 'summary' not in m])
    if os.path.exists(tempdir):
        clean()
    os.mkdir(tempdir)
    for mn in mice_names:
        open(os.path.join(tempdir,mn), 'a').close()
    mice = askopenfilenames(parent=root1, initialdir=tempdir, title='Select mice, DO NOT NAVIGATE FROM HERE')
    root1.destroy()
    clean()
    if not mice:
        sys.exit(0)
    mice = [os.path.split(m)[-1] for m in mice]
    print "Selected mice: " + str(mice)

if mode == 'group':
    for idx,mouse in enumerate(mice):
        print "(%i/%i) Processing %s"%(idx+1,len(mice),mouse)
        fh = FileHandler(data_dir, mouse, n=1)
        for tr in xrange(fh.get_n_trials()):
            try:
                if actions in ['track','both']:
                    mt = MouseTracker(mouse=mouse, n=tr+1, data_dir=data_dir, diff_thresh=diff_thresh)
                    mt.run(show=show, save=save_video, wait=ms_bt_frames)
                if actions in ['mark','both']:
                    m = Marker(mouse=mouse, n=tr+1, data_dir=data_dir)
                    m.run(resample=resample)
            except:
                print "%s %i failed."%(mouse,tr+1)

elif mode == 'single':
    if actions in ['track','both']:
        mt = MouseTracker(mouse=mouse, n=n, data_dir=data_dir, diff_thresh=diff_thresh)
        mt.run(show=show, save=save_video, wait=ms_bt_frames)
    if actions in ['mark','both']:
        m = Marker(mouse=mouse, n=n, data_dir=data_dir)
        m.run(resample=resample)
    
elif mode == 'collect':
    mice = [m for m in os.listdir(data_dir) if 'hab' not in m.lower() and m[0]!='.' and 'summary' not in m]

    rows = []
    for mouse in mice:
        print mouse
        fh = FileHandler(data_dir, mouse, n=1)
        for tr in xrange(fh.get_n_trials_wbehav()):
            fhm = FileHandler(data_dir, mouse, n=tr+1)
            data = np.load(fhm.make_path('behaviour.npz'))
            dic = dict(mouse=mouse, n=tr+1, score=data['score'], time_to_correct=data['time_to_correct'], distance=data['distance'])
            rows.append(dic)
    
    rows = np.array(rows)
    names = np.array([r['mouse'] for r in rows])
    nums = np.array([r['n'] for r in rows])
    ordr = np.lexsort((nums,names))
    rows = rows[ordr]
    with open(os.path.join(data_dir,'summary.csv'),'w') as f:
        dw = csv.DictWriter(f,fieldnames=['mouse','n','score','time_to_correct','distance'])
        dw.writeheader()
        for row in rows:
            dw.writerow(row)
